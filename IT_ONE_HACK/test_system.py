import requests
import asyncio
import time
import json
import sys
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL = "http://localhost:8000"
TEST_TRANSACTIONS = [
    {
        "amount": 150.50,
        "currency": "USD",
        "merchant": "Amazon",
        "user_id": "user_123",
        "timestamp": "2024-01-15T14:30:00Z",
        "description": "Normal online purchase"
    },
    {
        "amount": 50000.00,
        "currency": "USD",
        "merchant": "Unknown Merchant",
        "user_id": "user_456", 
        "timestamp": "2024-01-15T14:35:00Z",
        "description": "Large suspicious transfer"
    },
    {
        "amount": 25.00,
        "currency": "EUR",
        "merchant": "Starbucks",
        "user_id": "user_789",
        "timestamp": "2024-01-15T14:40:00Z",
        "description": "Coffee shop"
    }
]

class SystemTester:
    def __init__(self):
        self.created_transactions = []
        self.test_results = {}
    
    def print_step(self, message):
        print(f"\nüîπ {message}")
    
    def print_success(self, message):
        print(f"   ‚úÖ {message}")
    
    def print_error(self, message):
        print(f"   ‚ùå {message}")
    
    def print_warning(self, message):
        print(f"   ‚ö†Ô∏è  {message}")

    def test_health(self):
        """–¢–µ—Å—Ç –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        self.print_step("1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã")
        try:
            response = requests.get(f"{BASE_URL}/health", timeout=5)
            if response.status_code == 200:
                self.print_success(f"Health check: {response.json()}")
                return True
            else:
                self.print_error(f"Health check failed: {response.status_code}")
                return False
        except Exception as e:
            self.print_error(f"Health check error: {e}")
            return False

    def test_database_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î"""
        self.print_step("2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ API
            response = requests.get(f"{BASE_URL}/api/admin/transactions?limit=1", timeout=5)
            if response.status_code == 200:
                self.print_success("Database connection: OK")
                return True
            else:
                self.print_error(f"Database check failed: {response.status_code}")
                return False
        except Exception as e:
            self.print_error(f"Database check error: {e}")
            return False

    def test_redis_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
        self.print_step("3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis")
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—á–µ—Ä–µ–¥—å
            test_tx = {
                "amount": 1.00,
                "currency": "USD",
                "merchant": "Test",
                "user_id": "test_user",
                "timestamp": "2024-01-15T14:45:00Z"
            }
            
            response = requests.post(
                f"{BASE_URL}/api/transactions",
                json=test_tx,
                headers={"X-Correlation-ID": f"test-redis-{int(time.time())}"},
                timeout=5
            )
            
            if response.status_code == 201:
                self.print_success("Redis queue: OK (transaction accepted)")
                return True
            else:
                self.print_error(f"Redis test failed: {response.status_code}")
                return False
                
        except Exception as e:
            self.print_error(f"Redis test error: {e}")
            return False

    def create_test_transactions(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        self.print_step("4. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        success_count = 0
        
        for i, tx_data in enumerate(TEST_TRANSACTIONS):
            try:
                correlation_id = f"test-{i}-{int(time.time())}"
                response = requests.post(
                    f"{BASE_URL}/api/transactions",
                    json=tx_data,
                    headers={"X-Correlation-ID": correlation_id},
                    timeout=5
                )
                
                if response.status_code == 201:
                    tx_id = response.json()["id"]
                    self.created_transactions.append(tx_id)
                    self.print_success(f"Transaction {i+1}: {tx_id} (${tx_data['amount']} {tx_data['currency']})")
                    success_count += 1
                else:
                    self.print_error(f"Transaction {i+1} failed: {response.status_code}")
                    
            except Exception as e:
                self.print_error(f"Transaction {i+1} error: {e}")
        
        return success_count > 0

    def wait_for_processing(self, seconds=10):
        """–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        self.print_step(f"5. –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ({seconds} —Å–µ–∫—É–Ω–¥)")
        print("   ‚è≥ –û–∂–∏–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–æ—Ä–∫–µ—Ä–æ–º...")
        time.sleep(seconds)

    def check_processed_transactions(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        self.print_step("6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
        
        try:
            response = requests.get(f"{BASE_URL}/api/admin/transactions", timeout=5)
            if response.status_code == 200:
                data = response.json()
                transactions = data.get("transactions", [])
                
                if transactions:
                    self.print_success(f"–ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
                    status_count = {}
                    for tx in transactions:
                        status = tx.get("status", "unknown")
                        status_count[status] = status_count.get(status, 0) + 1
                    
                    for status, count in status_count.items():
                        self.print_success(f"  {status}: {count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
                    
                    return True
                else:
                    self.print_warning("–ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ")
                    return False
            else:
                self.print_error(f"Failed to get transactions: {response.status_code}")
                return False
                
        except Exception as e:
            self.print_error(f"Transaction check error: {e}")
            return False

    def test_analytics(self):
        """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        self.print_step("7. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
        
        try:
            response = requests.get(f"{BASE_URL}/api/admin/analytics", timeout=5)
            if response.status_code == 200:
                data = response.json()
                stats = data.get("stats", {})
                
                self.print_success("Analytics data:")
                for key, value in stats.items():
                    self.print_success(f"  {key}: {value}")
                
                return True
            else:
                self.print_error(f"Analytics failed: {response.status_code}")
                return False
                
        except Exception as e:
            self.print_error(f"Analytics error: {e}")
            return False

    def test_rules_management(self):
        """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞–º–∏"""
        self.print_step("8. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª–∞–º–∏")
        
        try:
            # –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞
            response = requests.get(f"{BASE_URL}/api/admin/rules", timeout=5)
            if response.status_code == 200:
                data = response.json()
                rules = data.get("rules", [])
                
                self.print_success(f"–ù–∞–π–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª: {len(rules)}")
                for rule in rules:
                    self.print_success(f"  {rule['name']} (–∞–∫—Ç–∏–≤–Ω–æ: {rule['is_active']})")
                
                return True
            else:
                self.print_error(f"Rules check failed: {response.status_code}")
                return False
                
        except Exception as e:
            self.print_error(f"Rules check error: {e}")
            return False

    def test_export(self):
        """–¢–µ—Å—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV"""
        self.print_step("9. –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ CSV")
        
        try:
            response = requests.get(f"{BASE_URL}/api/export/transactions", timeout=10)
            if response.status_code == 200:
                content_type = response.headers.get('content-type', '')
                if 'text/csv' in content_type:
                    self.print_success("CSV export: OK")
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                    with open('test_export.csv', 'wb') as f:
                        f.write(response.content)
                    self.print_success("–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test_export.csv")
                    return True
                else:
                    self.print_error(f"Wrong content type: {content_type}")
                    return False
            else:
                self.print_error(f"Export failed: {response.status_code}")
                return False
                
        except Exception as e:
            self.print_error(f"Export error: {e}")
            return False

    def test_api_documentation(self):
        """–¢–µ—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API"""
        self.print_step("10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API")
        
        try:
            response = requests.get(f"{BASE_URL}/api/docs", timeout=5)
            if response.status_code == 200:
                self.print_success("Swagger documentation: OK")
                return True
            else:
                self.print_warning(f"Docs check: {response.status_code}")
                return False
                
        except Exception as e:
            self.print_warning(f"Docs check error: {e}")
            return False

    async def run_full_test(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ü–†–û–í–ï–†–ö–ò ANTI-FRAUD –°–ò–°–¢–ï–ú–´")
        print("=" * 60)
        
        tests = [
            self.test_health,
            self.test_database_connection,
            self.test_redis_connection,
            self.create_test_transactions,
            lambda: self.wait_for_processing(8),  # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
            self.check_processed_transactions,
            self.test_analytics,
            self.test_rules_management,
            self.test_export,
            self.test_api_documentation
        ]
        
        passed_tests = 0
        total_tests = len(tests)
        
        for test in tests:
            try:
                if asyncio.iscoroutinefunction(test):
                    result = await test()
                else:
                    result = test()
                
                if result:
                    passed_tests += 1
            except Exception as e:
                self.print_error(f"Test crashed: {e}")
        
        # –ò—Ç–æ–≥–∏
        print("\n" + "=" * 60)
        print("üéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        print(f"   –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed_tests}/{total_tests}")
        
        if passed_tests == total_tests:
            print("   ‚úÖ –í–°–ï –°–ò–°–¢–ï–ú–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
        elif passed_tests >= total_tests * 0.7:
            print("   ‚ö†Ô∏è  –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢, –ï–°–¢–¨ –ù–ï–ë–û–õ–¨–®–ò–ï –ü–†–û–ë–õ–ï–ú–´")
        else:
            print("   ‚ùå –°–ò–°–¢–ï–ú–ê –¢–†–ï–ë–£–ï–¢ –î–û–†–ê–ë–û–¢–ö–ò")
        
        print(f"\nüìä –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ: {BASE_URL}/api/docs")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if len(sys.argv) > 1 and sys.argv[1] == "--wait":
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
        time.sleep(15)
    
    tester = SystemTester()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    try:
        asyncio.run(tester.run_full_test())
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
